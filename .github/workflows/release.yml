name: PyPi Package Deploy
on:
  workflow_dispatch:
    inputs:
      release:
        type: choice
        description: Select Release Type
        default: "minor"
        options:
          - major
          - minor
          - patch
permissions:
  contents: write
  deployments: write
  packages: write
concurrency:
  group: "release"
  cancel-in-progress: false
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      CI_COMMIT_MESSAGE: Continuous Integration Version Bump ${{ inputs.release }}
    outputs:
      RELEASE_TAG: ${{ steps.set_version.outputs.RELEASE_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv Package
        run: |
          pip install --upgrade pip
          pip install build
          pip install uv==0.5.30
      - name: Install Dependencies
        run: uv sync --group dev
      - name: Bump Version
        id: set_version
        run: |
          uv run python - <<EOF
          from tomlkit import parse, dumps
          from tomlkit.toml_file import TOMLFile
          file = TOMLFile("pyproject.toml")
          doc = file.read()
          version = doc["project"]["version"]
          release = "${{ inputs.release }}"
          major, minor, patch = map(int, version.split('.'))
          if release == "major":
              new_version = f"{major + 1}.0.0"
          elif release == "minor":
              new_version = f"{major}.{minor + 1}.0"
          elif release == "patch":
              new_version = f"{major}.{minor}.{patch + 1}"
          doc["project"]["version"] = new_version
          file.write(doc)
          print(f"New Version: {new_version}")
          EOF
          NEW_VERSION=$(uv run python -c 'from tomlkit.toml_file import TOMLFile; print(TOMLFile("pyproject.toml").read()["project"]["version"])')
          echo "RELEASE_TAG=$NEW_VERSION" >> $GITHUB_ENV
          echo "RELEASE_TAG=$NEW_VERSION" >> $GITHUB_OUTPUT  # Set output variable
      - name: Build package
        run: python -m build
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/
          retention-days: 1
      - name: GIT commit and tag
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add pyproject.toml
          git commit -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push
          echo "Tagging new version: $RELEASE_TAG"
          git tag -a "$RELEASE_TAG" -m "Auto-generated tag"
          git push origin "$RELEASE_TAG"
      - name: "Create release"
        uses: actions/github-script@v7
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            if (!process.env.RELEASE_TAG) {
              core.setFailed("The environment variable RELEASE_TAG is not defined.");
              return;
            }
            try {
              const response = await github.rest.repos.createRelease({
                draft: false,
                generate_release_notes: true,
                name: process.env.RELEASE_TAG,
                owner: context.repo.owner,
                prerelease: false,
                repo: context.repo.repo,
                tag_name: process.env.RELEASE_TAG,
              });
              core.exportVariable('RELEASE_ID', response.data.id);
              core.exportVariable('RELEASE_UPLOAD_URL', response.data.upload_url);
            } catch (error) {
              core.setFailed(error.message);
            }
  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
      url: "https://pypi.org/project/pyretailscience"
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: dist
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  deploy-docs:
    name: Deploy versioned documentation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install uv Package
        run: |
          pip install --upgrade pip
          pip install uv==0.5.30
      - name: Install Dependencies
        run: uv sync --group docs
      - name: Setup Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      - name: Clean existing latest alias
        run: |
          echo "Cleaning existing latest alias"
          uv run mike delete latest || echo "No existing latest alias to delete"
      - name: Deploy Documentation with Copy Alias
        run: |
          echo "Deploying documentation for version ${{ needs.build.outputs.RELEASE_TAG }}"
          # Deploy the specific version first
          uv run mike deploy --push ${{ needs.build.outputs.RELEASE_TAG }}
          # Then create the latest alias using copy
          uv run mike alias --push ${{ needs.build.outputs.RELEASE_TAG }} latest
          # Set latest as default
          uv run mike set-default --push latest
      - name: Verify deployment
        run: |
          echo "Verifying deployment..."
          uv run mike list
          # Check if sitemap exists in both locations
          git checkout gh-pages
          echo "Checking ${{ needs.build.outputs.RELEASE_TAG }} sitemap:"
          ls -la ${{ needs.build.outputs.RELEASE_TAG }}/sitemap.xml || echo "No sitemap in version directory"
          echo "Checking latest sitemap:"
          ls -la latest/sitemap.xml || echo "No sitemap in latest directory"
