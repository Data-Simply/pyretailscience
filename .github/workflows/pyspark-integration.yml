name: PySpark Integration Tests

on:
  workflow_dispatch:
    inputs:
      test_suite:
        type: choice
        description: Test Suite to Run
        default: "all"
        options:
          - all
          - cohort_analysis
          - composite_rank
          - cross_shop
          - customer_decision_hierarchy
          - date
          - filter_and_label
          - haversine
          - hml_segmentation
          - product_association
          - revenue_tree
          - rfm_segmentation
          - segstats_segmentation
          - threshold_segmentation

permissions:
  contents: read

concurrency:
  group: "pyspark-tests"
  cancel-in-progress: true

jobs:
  integration-tests:
    name: Run PySpark Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv Package
        run: |
          pip install --upgrade pip
          pip install uv==0.5.30

      - name: Install Dependencies
        run: |
          uv sync --group dev

      - name: Setup Docker Compose
        uses: docker/setup-buildx-action@v3

      - name: Start PySpark Container
        run: |
          cd tests/integration/pyspark
          docker-compose up --build -d
          sleep 30  # Wait for container startup

      - name: Validate Input
        run: |
          # Validate test_suite input to prevent command injection
          case "${{ inputs.test_suite }}" in
            all|cohort_analysis|composite_rank|cross_shop|customer_decision_hierarchy|date|filter_and_label|haversine|hml_segmentation|product_association|revenue_tree|rfm_segmentation|segstats_segmentation|threshold_segmentation)
              echo "Valid test suite: ${{ inputs.test_suite }}"
              ;;
            *)
              echo "Invalid test suite: ${{ inputs.test_suite }}"
              exit 1
              ;;
          esac

      - name: Run Integration Tests
        env:
          TEST_SUITE: ${{ inputs.test_suite }}
        run: |
          cd tests/integration/pyspark
          if [ "$TEST_SUITE" == "all" ]; then
            docker-compose exec -T spark bash -c "cd /app/work && uv run pytest tests/integration/pyspark -v --tb=short"
          else
            docker-compose exec -T spark bash -c "cd /app/work && uv run pytest tests/integration/pyspark/test_${TEST_SUITE}.py -v --tb=short"
          fi

      - name: Cleanup
        if: always()
        run: |
          cd tests/integration/pyspark
          docker-compose down
