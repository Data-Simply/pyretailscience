name: Page Deploy

on:
  push:
    branches:
      - "main"
    paths:
      - "**.md"
      - "mkdocs.yml"
      - "docs/**"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (default: "dev" for main branch)'
        required: false
        default: 'dev'

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  docs:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv Package
        run: |
          pip install --upgrade pip
          pip install uv==0.5.30

      - name: Install Pre-commit in uv environment
        run: uv run pip install pre-commit

      - name: Install Dependencies
        run: uv sync --group docs

      - name: Setup Git User
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set version variables
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Strip refs/tags/ from the beginning if present
            REF_NAME="${GITHUB_REF#refs/tags/}"
            echo "VERSION=${REF_NAME}" >> $GITHUB_ENV
            echo "VERSION_ALIAS=latest" >> $GITHUB_ENV
            echo "Building docs for release: ${REF_NAME}"
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "VERSION_ALIAS=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "Building docs for specified version: ${{ github.event.inputs.version }}"
          else
            echo "VERSION=dev" >> $GITHUB_ENV
            echo "VERSION_ALIAS=dev" >> $GITHUB_ENV
            echo "Building docs for dev branch"
          fi

      - name: Deploy with Mike
        run: |
          # Check if the version we're trying to deploy already exists
          if uv run mike list | grep -q "${{ env.VERSION }}"; then
            echo "Version ${{ env.VERSION }} already exists, updating it"
            uv run mike delete --push ${{ env.VERSION }}
          fi

          # Deploy the version
          uv run mike deploy --push ${{ env.VERSION }}

          # Only create alias if it's different from the version
          if [[ "${{ env.VERSION }}" != "${{ env.VERSION_ALIAS }}" ]]; then
            # Check if the alias exists before trying to create it
            if uv run mike list | grep -q "${{ env.VERSION_ALIAS }}"; then
              echo "Alias ${{ env.VERSION_ALIAS }} already exists, removing it first"
              uv run mike delete --push ${{ env.VERSION_ALIAS }}
            fi
            # Now create the alias
            uv run mike alias --push ${{ env.VERSION }} ${{ env.VERSION_ALIAS }}
          fi

          # If this is a release, set default to latest
          if [[ "${{ github.event_name }}" == "release" || "${{ env.VERSION_ALIAS }}" == "latest" ]]; then
            uv run mike set-default --push latest
          fi
